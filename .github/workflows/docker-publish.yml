name: Docker

on:
  schedule:
    - cron: '0 7 * * 2,4'
  push:
    branches: [ "1.x" ]
  pull_request:
    branches: [ "1.x" ]

env:
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  PHP_VERSIONS_FILE: "scripts/conf/versions.yml"
  PHP_VERSIONS_FLOOR: "7"

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      php-version-map-json: ${{ steps.get-php-versions.outputs.php-version-map-json }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Prepare PHP versions for the matrix.
        run: ./scripts/get-php-versions.sh

      - name: Ensure our PHP Versions file exists.
        run: |
          ls -lan ./
          if [ ! -f "${{ env.PHP_VERSIONS_FILE }}" ]; then
            echo "PHP Versions file does not exist. Exiting."
            exit 1
          else
            cat ${{ env.PHP_VERSIONS_FILE }}
          fi

      - name: Assemble PHP versions into the matrix.
        id: get-php-versions
        run: |
          MATRIX_JSON=$(yq -o=json ${{ env.PHP_VERSIONS_FILE }} | jq -c)
          echo "php-version-map-json=${MATRIX_JSON}" >> $GITHUB_OUTPUT
          echo "${MATRIX_JSON}" | jq '.'

  publish:
    needs: setup-matrix
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 1
      matrix:
        version: ${{fromJson(needs.setup-matrix.outputs.php-version-map-json)}}

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Prepare the cache to receive Buildx images downloaded.
      # https://docs.docker.com/build/ci/github-actions/cache/#local-cache
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Check if is the current version is the latest
      - name: Determine if the version is the latest
        id: check_latest
        run: |
          VERSIONS_ARRAY=($(echo ${{ needs.setup-matrix.outputs.php-version-map-json }} | jq -r '.[]' | sort -V))
          LATEST_VERSION=${VERSIONS_ARRAY[-1]}
          if [ "${{ matrix.version }}" == "$LATEST_VERSION" ]; then
            echo "::set-output name=is_latest::true"
          else
            echo "::set-output name=is_latest::false"
          fi

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ matrix.version }}
            ${{ steps.check_latest.outputs.is_latest == 'true' && 'type=raw,value=latest' || '' }}

      # Use Google Cloud Docker Hub mirror to avoid Docker pull limit.
      # https://devtron.ai/blog/dodging-docker-hub-rate-limits-the-ultimate-cheat-code-for-your-ci-cd-pipeline/
      # - name: Override Docker registry mirror
      #  run: |
      #    echo 'DOCKER_OPTS="--registry-mirror=https://mirror.gcr.io"' >> $GITHUB_ENV
      #    echo 'BUILDKIT_REGISTRY_MIRRORS={"docker.io": {"mirrors": ["https://mirror.gcr.io"]}}' >> $GITHUB_ENV

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          build-args: |
            BUILDKIT_REGISTRY_MIRRORS='{"docker.io": {"mirrors": ["https://mirror.gcr.io"]}}'
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Temp fix
      # https://docs.docker.com/build/ci/github-actions/cache/#local-cache
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
