name: Docker

on:
  schedule:
    - cron: '0 7 * * 2,4'
  push:
    branches: [ "1.x" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "1.x" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  PHP_VERSIONS_FILE: scripts/conf/versions.yml

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      php-version-map-json: ${{ steps.get-php-versions.outputs.php-version-map-json }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Prepare PHP versions for the matrix.
        run: ./scripts/get-php-versions.sh

      - name: Ensure our PHP Versions file exists.
        run: |
          if [ ! -f "${{ env.PHP_VERSIONS_FILE }}" ]; then
            echo "PHP Versions file does not exist. Exiting."
            exit 1
          else
            cat ${{ env.PHP_VERSIONS_FILE }}
          fi

      - name: Assemble PHP versions into the matrix.
        id: get-php-versions
        run: |
          MATRIX_JSON=$(yq -o=json scripts/conf/php-versions.yml | jq -c '{include: [(.php_variations[] | {name} ) as $variation | .php_versions[] | .minor_versions[] | .patch_versions[] as $patch | {patch_version: $patch, php_variation: $variation.name}]} | {include: (.include | sort_by(.patch_version | split(".") | map(tonumber) | . as $nums | ($nums[0]*10000 + $nums[1]*100 + $nums[2])) | reverse)}')
          echo "php-version-map-json=${MATRIX_JSON}" >> $GITHUB_OUTPUT
          echo "${MATRIX_JSON}" | jq '.'

      - name: Upload the php-versions.yml file
        uses: actions/upload-artifact@v4
        with:
          name: php-versions.yml
          path: ${{ env.PHP_VERSIONS_FILE }}

  publish:
    needs: setup-matrix
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{fromJson(needs.setup-matrix.outputs.php-version-map-json)}}

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      # Download the php file versions map to the job
      # https://github.com/actions/download-artifact
      - name: Download PHP Versions file
        uses: actions/download-artifact@v4
        with:
          name: php-versions.yml
          path: ./artifacts

      # Renames
      # https://github.com/actions/download-artifact
      - name: Move PHP Versions file
        run: mv ./artifacts/php-versions.yml ${{ env.PHP_VERSIONS_FILE }}

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghrc.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
